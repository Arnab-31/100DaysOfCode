Link: https://leetcode.com/problems/kth-largest-element-in-an-array/submissions/

#include <climits> 
#include <iostream> 
using namespace std; 
  
void swap(int* x, int* y); 
  

class MinHeap { 
    vector<int>harr; 
    int capacity; 
    int heap_size; 
public: 
    MinHeap(vector<int>a, int size); 
    void MinHeapify(int i);
    int parent(int i) { return (i - 1) / 2; } 
    int left(int i) { return (2 * i + 1); } 
    int right(int i) { return (2 * i + 2); } 
  
    int extractMin(); 
    int getMin() { return harr[0]; } 
}; 
  
MinHeap::MinHeap(vector<int>a, int size) 
{ 
    heap_size = size; 
    harr = a; 
    int i = (heap_size - 1) / 2; 
    while (i >= 0) { 
        MinHeapify(i); 
        i--; 
    } 
} 
  

int MinHeap::extractMin() 
{ 
    if (heap_size == 0) 
        return INT_MAX; 
  
    int root = harr[0]; 
  
    if (heap_size > 1) { 
        harr[0] = harr[heap_size - 1]; 
        MinHeapify(0); 
    } 
    heap_size--; 
  
    return root; 
} 
 
void MinHeap::MinHeapify(int i) 
{ 
    int l = left(i); 
    int r = right(i); 
    int smallest = i; 
    if (l < heap_size && harr[l] < harr[i]) 
        smallest = l; 
    if (r < heap_size && harr[r] < harr[smallest]) 
        smallest = r; 
    if (smallest != i) { 
        swap(&harr[i], &harr[smallest]); 
        MinHeapify(smallest); 
    } 
} 
  
void swap(int* x, int* y) 
{ 
    int temp = *x; 
    *x = *y; 
    *y = temp; 
} 

class Solution {
public:
    int findKthLargest(vector<int>nums, int k) {
        MinHeap* mh = new MinHeap(nums,nums.size());
        for(int i=0;i<nums.size()-k;i++)
        {
            mh->extractMin();   
        }
        return mh->getMin();
    }
};
